collins08.pa$abundance <- 1
collins08.pa <- collins08
collins08.pa$abundance <- 1
head(collins08.pa)
head(collins08)
knz.tur <- turnover(df=collins08,
time.var= "year",
species.var="species",
abundance.var="abundance",
replicate.var="replicate",
metric="total")
knz.tur.pa <- turnover(df=collins08.pa,
time.var= "year",
species.var="species",
abundance.var="abundance",
replicate.var="replicate",
metric="total")
head(knz.tur)
head(knz.tur.pa)
knz.rshift <- rank_shift(df=collins08,
time.var= "year",
species.var="species",
abundance.var="abundance",
replicate.var="replicate")
dim(knz.rshift)
head(knz.rshift)
knz.rsh <- rank_shift(df=collins08,
time.var= "year",
species.var="species",
abundance.var="abundance",
replicate.var="replicate")
knz.rsh.ps <- rank_shift(df=collins08.pa,
time.var= "year",
species.var="species",
abundance.var="abundance",
replicate.var="replicate")
head(knz.rsh)
head(knz.rsh.pa)
knz.rsh.pa <- rank_shift(df=collins08.pa,
time.var= "year",
species.var="species",
abundance.var="abundance",
replicate.var="replicate")
head(knz.rsh.pa)
range(knz.rsh$MRS)
knz.rch <- rate_change(df=collins08,
time.var= "year",
species.var="species",
abundance.var="abundance",
replicate.var="replicate")
knz.rch.pa <- rate_change(df=collins08.pa,
time.var= "year",
species.var="species",
abundance.var="abundance",
replicate.var="replicate")
head(knz.rch)
knz.rch
knz.rch.pa
collins08[1:10,]
##############################
####Package betapart
##############################
require(betapart)
##############################
####Package betapart
##############################
install.packages("betapart")
require(betapart)
bbs <- data(bbsData)
dim(bbs)
head(bbs)
bbs[[1]]
data(bbsData)
str(bbs1980)
str(bbs2000)
dim(bbs1980)
dim(bbs2000)
bbs[1:10,1:5]
bbs1980[1:10,1:5]
bbs2000[1:10,1:5]
range(bbs2000)
range(bbs1980)
bbs.beta <- beta.multi(bbs1980, index.family="sorensen")
dim(bbs.beta)
str(bbs.beta)
dim(bbs.beta$beta.SIM)
bbs.beta$beta.SIM
data(ceram.s)
dim(ceram.s)
ceram.s[1:4,1:10]
#abundance-based multiple-site dissimilarities
require(vegan)
data(BCI)
beta.multi.abund(BCI, index.family="bray")
dim(BCI)
BCI[1:5,1:10]
beta.multi.abund(BCI, index.family="bray")
dim(BCI)
#incidnece-based dissimilarity
data(ceram.s)
ceram.dist<-beta.pair(ceram.s, index.family="jac")
ceram.dist
#abundance-based pair-wise dissimilarity
BCI.pair <- beta.pair.abund(BCI, index.family="bray")
dim(BCI.pair)
BCI.pair
BCI.pair[1:10,1:10]
BCI.pair$beta.bray[1:10,1:10]
BCI.pair$beta.bray
dim(BCI.pair$beta.bray)
#temporal change in community composition
data(bbsData)
bbs.t <- beta.temp(bbs1980, bbs2000, index.family="sor")
bbs.t
bbs1980[1:10,1:10]
data(BCI)
core.BCI<-betapart.core.abund(BCI)
pair.BCI<-beta.pair.abund(core.BCI)
multi.BCI<-beta.multi.abund(core.BCI)
core.BCI
#pair-wise functional dissimilarities
##### 4 communities in a 2D functional space (convex hulls are rectangles)
traits.test<-cbind( c(1,1,1,2,2,3,3,4,4,5,5) , c(1,2,4,1,2,3,5,1,4,3,5) )
dimnames(traits.test)<-list(paste("sp",1:11,sep="") , c("Trait 1","Trait 2") )
comm.test<-matrix(0,4,11,dimnames=list( c("A","B","C","D") , paste("sp",1:11,sep="") ) )
comm.test["A",c(1,2,4,5)]<-1
comm.test["B",c(1,3,8,9)]<-1
comm.test["C",c(6,7,10,11)]<-1
comm.test["D",c(2,4,7,9)]<-1
comm.test
plot(5,5,xlim=c(0,6), ylim=c(0,6), type="n", xlab="Trait 1",ylab="Trait 2")
points(traits.test[,1],traits.test[,2], pch=21,cex=1.5,bg="black")
rect(1,1,4,4, col="#458B0050", border="#458B00") ; text(2.5,2.5,"B",col="#458B00",cex=1.5)
polygon(c(2,1,3,4), c(1,2,5,4), col="#DA70D650", border="#DA70D6") ;
text(2.5,3,"D",col="#DA70D6",cex=1.5)
rect(1,1,2,2, col="#FF000050" , border="#FF0000") ; text(1.5,1.5,"A",col="#FF0000",cex=1.5)
rect(3,3,5,5, col="#1E90FF50", border="#1E90FF") ; text(4,4.2,"C",col="#1E90FF",cex=1.5)
test.pair<-functional.beta.pair(x=comm.test, traits=traits.test, index.family = "jaccard" )
lapply(test.pair,round,2)
##############################
####Package adespatial
##############################
install.packages("adespatial")
require(adespatial)
if(require("vegan", quietly = TRUE)) {
## Example 1 -
## Invertebrate communities subjected to insecticide treatment.
## As an example in their paper on Principal Response Curves (PRC method), van den
## Brink & ter Braak (1999) used observations on the abundances of 178 invertebrate
## species (macroinvertebrates and zooplankton) subjected to treatments in 12 mesocosms by
## the insecticide chlorpyrifos. The mesocosms were sampled at 11 occasions. The data,
## available in the {vegan} package, are log-transformed species abundances, ytranformed =
## log(10*y+1).
## The data of survey #4 will be compared to those of survey #11 in this example.
## Survey #4 was carried out one week after the insecticide treatment, whereas the fauna
## of the mesocosms was considered by the authors to have fully recovered from the
## insecticide treatment at survey #11.
data(pyrifos)
## The mesocosms had originally been attributed at random to the treatments. However,
## to facilitate presentation of the results, they will be listed here in order of
## increased insecticide doses: {0, 0, 0, 0, 0.1, 0.1, 0.9, 0.9, 6, 6, 44, 44} micro g/L.
## Select the 12 data rows of surveys 4 and 11 from the data file and reorder them
ord4 = c(38,39,41,47,37,44,40,46,43,48,42,45)
ord11 = c(122,123,125,131,121,128,124,130,127,132,126,129)
## Run the TBI function
res1 <- TBI(pyrifos[ord4,], pyrifos[ord11,], method = "%diff", nperm = 0, test.t.perm = FALSE)
res1$BCD.mat
## Example 2 -
## This example uses the mite data available in vegan. Let us pretend that sites 1-20
## represent T1 and sites 21-40 represent T2.
data(mite)
# Run the TBI function
res2 <- TBI(mite[1:20,], mite[21:40,], method = "%diff", nperm = 0, test.t.perm = FALSE)
summary(res2)
res2$BCD.mat
}
pyrifos
##############################
####Package BAT
##############################
install.packages("BAT")
require(BAT)
comm1 <- matrix(c(2,2,0,0,0,1,1,0,0,0,0,2,2,0,0,0,0,0,2,2), nrow = 4, byrow = TRUE)
comm2 <- matrix(c(1,1,0,0,0,0,2,1,0,0,0,0,2,1,0,0,0,0,2,1), nrow = 4, byrow = TRUE)
tree <- hclust(dist(c(1:5), method="euclidean"), method="average")
beta.accum(comm1, comm2)
beta.accum(comm1, comm2, func = "Soerensen")
beta.accum(comm1, comm2, tree)
beta.accum(comm1, comm2, abund = TRUE)
beta.accum(comm1, comm2, tree, TRUE)
comm1
comm <- matrix(c(2,2,0,0,0,1,1,0,0,0,0,2,2,0,0,0,0,0,2,2), nrow = 4, ncol = 5, byrow = TRUE)
tree <- hclust(dist(c(1:5), method="euclidean"), method="average")
beta.multi(comm)
beta.multi(comm, func = "Soerensen")
beta.multi(comm, tree)
beta.multi(comm, raref = 1)
beta.multi(comm, tree, TRUE, "s", raref = 2)
comm
tree <- hclust(dist(c(1:5), method="euclidean"), method="average")
tree
plot(hclust)
beta.multi(comm, tree, TRUE, "s", raref = 2)
beta.multi(comm, tree)
#beta
comm <- matrix(c(2,2,0,0,0,1,1,0,0,0,0,2,2,0,0,0,0,0,2,2), nrow = 4, ncol = 5, byrow = TRUE)
comm
tree <- hclust(dist(c(1:5), method="euclidean"), method="average")
beta(comm)
beta(comm, tree, abund = TRUE, "s", raref = 2)
require(BAT)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x) }
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)  },measurevar )
datac <- rename(datac, c("mean" = measurevar));
datac$se <- datac$sd / sqrt(datac$N)
ciMult <- qt(conf.interval/2 + .5, datac$N-1);
datac$ci <- datac$se * ciMult
return(datac)};
beetledata$week=as.factor(beetledata$week)
t1 <- c(4,5,6)
sd(t1)
mean(t1)
t1 <- c(4,5,7)
sd(t1)
install.packages("emmeans")
2%*$5
2%*%5
library(devtools)
devtools::install_github("ahhurlbert/aviandietdb")
library(aviandietdb)
dbSummary()
speciesSummary("Bald Eagle", by = "Order")
speciesSummary("American Robin", by = "Order")
speciesSummary("American Robin")
speciesSummary("American Crow")
3+43+3+13+8+9+2
dbSummary()
speciesSummary("American Crow")
3+38+58+38_41+47
3+38+58+38+41+47
169+56
53+53+2+31+46+23+13
3+43+3+13+144+9+2
3+43+3+13+144+9+2+8
53+2+53+31+46+23+13
dietSummary("Bald Eagle", season = "summer", region =
"California", yearRange = c(1940, 1970), by = "Order",
dietType = "Items")
dietSummary("Bald Eagle", season = "summer", region =
"California", by = "Order",
dietType = "Items")
ciesSummary("Bald Eagle", by = "Order")
speciesSummary("Bald Eagle", by = "Order")
dietSummary("Bald Eagle", season = "summer", region =
"California", by = "Order",
dietType = "Items")
dietSummaryByPrey("Lepidoptera", preyLevel = "Order", dietType
= "Items", yearRange = c(1985, 2000), season = "summer",
preyStage = "larva", speciesMean = TRUE)
exp(-5)
exp(-4)
exp(-2.75)
exp(-2.75)/(1+exp(-2.75))
5+5
tr1 <- c(5,5,5,5,55,0,0,0,0,0)
tr2 <- c(0,0,0,0,0,0,5,5,5,5,5,5)
tr1 <- c(5,5,5,5,5,5,0,0,0,0,0,0)
tr1
tr2
var(tr1)
var(tr2)
tr.b <- rbind(tr1,tr2)
tr.b
var(tr.b)
var(tr.b)
library(rgdal)
library(rasterVis) # makes the fancy raster plots
library(RColorBrewer) # color the fancy raster plots
library(neonUtilities)
library(ggplot2)
insttall.packages("lidR")
install.packages("lidR")
install.packages("lidR")
library(lidR) # LiDAR package
require(tidyverse)
random_df <- expand_grid(x = seq(0,10,0.1), y = seq(0,10,0.1))
random_df <- random_df %>%
mutate(rand = rnorm(dim(random_df)[1], 0, 1))
ggplot(random_df, aes(x=x, y=y, fill = rand)) %>%
+ geom_raster() %>%
+ scale_fill_distiller(palette = "RdBu")
require(tidyverse)
random_df <- expand_grid(x = seq(0,100,0.1), y = seq(0,100,0.1))
random_df <- random_df %>%
mutate(rand = rnorm(dim(random_df)[1], 0, 1))
ggplot(random_df, aes(x=x, y=y, fill = rand)) %>%
+ geom_raster() %>%
+ scale_fill_distiller(palette = "RdBu")
require(tidyverse)
random_df <- expand_grid(x = seq(0,10,0.1), y = seq(0,10,0.1))
random_df <- random_df %>%
mutate(rand = rnorm(dim(random_df)[1], 0, 1))
ggplot(random_df, aes(x=x, y=y, fill = rand)) %>%
+ geom_raster() %>%
+ scale_fill_distiller(palette = "RdBu")
library(vegan)
data(dune)
data(dune.env)
dune
due.env
dune.env
dune.dist <- vegdist(dune, method="bray")
dune.dist
dune.div <- adonis2(dune ~ Management*A1, data = dune.env, permutations = 999, method="bray")
dune.div
dune.div <- adonis2(dune ~ Management, data = dune.env, permutations = 999, method="bray")
dune.div
dune
dune.div
dune.dist
dune.ebv
dune.ev
dune.env
dune.div <- adonis2(dune ~ Management*A1, data = dune.env, permutations = 999, method="bray")
dune.div
dune.div <- adonis2(dune ~ A1, data = dune.env, permutations = 999, method="bray")
dune.div
adonis2
adonis0
dune.div <- adonis2(dune ~ A1 +(A1)^2, data = dune.env, permutations = 999, method="bray")
dune.div <- adonis2(dune ~ A1 +I(A1)^2, data = dune.env, permutations = 999, method="bray")
dune.div
dune.div <- adonis2(dune ~ I(A1)^2, data = dune.env, permutations = 999, method="bray")
dune.div
dune.div <- adonis2(dune ~ I(A1^2), data = dune.env, permutations = 999, method="bray")
dune.div
# Simple Pie Chart
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls, main="Pie Chart of Countries")
data <- data.frame(
group=LETTERS[1:5],
value=c(13,7,9,21,2)
)
# Basic piechart
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# Load ggplot2
library(ggplot2)
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
library(viridis)
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
scale_fill_viridis_d(option="magma") +
theme_void()
data <- data.frame(
group=LETTERS[1:5],
value=c(20,20,20,20,20)
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
scale_fill_viridis_d(option="turbo") +
theme_void() # remove background, grid, numeric labels
data <- data.frame(
group=LETTERS[1:5],
value=c(20,20,20,20,20)
)
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
scale_fill_viridis_d(option="turbo") +
theme_void() # remove background, grid, numeric labels
data <- data.frame(
group=LETTERS[1:7],
value=c(20,20,20,20,20,20,20)
)
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
scale_fill_viridis_d(option="turbo") +
theme_void() # remove background, grid, numeric labels
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
#scale_fill_viridis_d(option="turbo") +
scale_fill_manual(values=c("cyan3","coral2","darkgoldenrod1", "dodgerblue1","firebrick1"))
theme_void() # remove background, grid, numeric labels
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
#scale_fill_viridis_d(option="turbo") +
scale_fill_manual(values=c("cyan3","coral2","darkgoldenrod1", "dodgerblue1","firebrick1")) +
theme_void() # remove background, grid, numeric labels
data <- data.frame(
group=LETTERS[1:5],
value=c(20,20,20,20,20)
)
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
#scale_fill_viridis_d(option="turbo") +
scale_fill_manual(values=c("cyan3","coral2","darkgoldenrod1", "dodgerblue1","firebrick1")) +
theme_void() # remove background, grid, numeric labels
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
#scale_fill_viridis_d(option="turbo") +
scale_fill_manual(values=c("cyan3","coral2","darkgoldenrod1", "dodgerblue1","chartreuse4")) +
theme_void() # remove background, grid, numeric labels
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
#scale_fill_viridis_d(option="viridis")
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
scale_fill_viridis_d(option="viridis") +
#scale_fill_manual(values=c("cyan3","coral2","darkgoldenrod1", "dodgerblue1","chartreuse4")) +
theme_void() # remove background, grid, numeric labels
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
scale_fill_viridis_d(option="magma") +
#scale_fill_manual(values=c("cyan3","coral2","darkgoldenrod1", "dodgerblue1","chartreuse4")) +
theme_void() # remove background, grid, numeric labels
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
#scale_fill_viridis_d(option="magma") +
scale_fill_manual(values=c("cyan3","coral2","darkgoldenrod1", "dodgerblue1","chartreuse4")) +
theme_void() # remove background, grid, numeric labels
ggplot(data, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
#scale_fill_viridis_d(option="magma") +
scale_fill_manual(values=c("cyan3","coral2","darkgoldenrod1", "dodgerblue1","deeppink3")) +
theme_void() # remove background, grid, numeric la
inv <- 0.01251063
vert <- 0.07373712
scav <- 0.06271028
fruit <- 0.09091175
nect <- 0.02308233
seed <- 0.06181708
plant <- 0.04332023
wbs <- 0.03886894
was <- 0.03764052
ground <- 0.03472883
under <- 0.02036610
midh <- 0.10013602
upper <- 0.04156486
aerial <-
aerial <- 0.09982529
noct <- 0.14174089
mass <- 0.11703913
diet <- inv+vert+scav+fruit+nect+seed+plant
diet
forag <- wbs+was+ground+under+midh+upper+aerial
forag
diet+forag+mass+noct
# Load necessary libraries
library(sf)
library(raster)
# Define projection for equal area grid
prj <- "+proj=laea +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
# Create raster with 110 km resolution
r <- raster(ncols=6480, nrows=3240, xmn=-20037508.34, xmx=20037508.34, ymn=-10018754.17, ymx=10018754.17, crs=prj)
# Convert raster to SpatialPolygonsDataFrame
sp_grid <- as(r, "SpatialPolygonsDataFrame")
# Set projection of the spatial object to WGS84
sp_grid <- spTransform(sp_grid, CRS("+init=epsg:4326"))
# Plot the grid
plot(sp_grid, col = "lightgrey", border = "white")
rm(list=ls(all=TRUE))
datadir <- "/Users/jarzyna.1/Documents/Dropbox/Manuscripts/2023_GEB_SJM-etal_TemporalAvoDiet-DataPaper"
datadir <- "/Users/jarzyna.1/Documents/Dropbox/Manuscripts/2023_GEB_SJM-etal_TemporalAvoDiet-DataPaper/SAviTraits_database"
setwd(datadir)
## read in the main database file
database <- read_csv('database-files-v1.0/SAviTraits_1-0_1.csv')
packages<-c('tidyverse', 'dplyr', 'plyr', 'matrixStats', 'rvest', 'httr', 'viridis',
'raster', 'maps', 'mapdata', 'rworldmap', 'ape', 'adephylo', 'picante',
'rgeos')
lapply(packages, require, character.only=TRUE)
## read in the main database file
database <- read_csv('database-files-v1.0/SAviTraits_1-0_1.csv')
colnames(database)
###### join metrics of effort and certainty  ---------------------------------------------------
database_cert<-read.csv('database-files-v1.0/SAviTraits_1-0_2.csv')
colnames(database_cert)
database_cert2<-readRDS('database-files-v1.0/SAviTraits_1-0_2_citations.rds')
colnames(database_cert2)
###### join metrics of effort and certainty  ---------------------------------------------------
database_cert<-read.csv('database-files-v1.0/SAviTraits_1-0_3.csv')
head(database_cert)
dim(database_cert)
